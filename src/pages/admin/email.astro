---
import Admin from '../../layouts/Admin.astro';
import sgMail from '@sendgrid/mail';
import { type Account, accountRoles, getAllAccountsWithMinRole } from '@blankstorm/api';
import { currentUser } from '../../utils';
const roles = accountRoles.map(role => role.toLowerCase());
const sender = await currentUser(Astro.cookies);

if(!sender) {
	return Astro.redirect('/login');
}

let message;
if(Astro.request.method == 'POST'){
	try{
		const body = Object.fromEntries<string>([...await Astro.request.formData()] as [string, string][]);
		for(const param of ['from', 'address', 'to', 'subject', 'content']){
			if(!(param in body)){
				throw 'Missing: ' + param;
			}
		}
		const isMultiple = roles.includes(body.to);
		let to: string | { to: string; substitutions: Account; }[] = body.to, accounts;
		if(isMultiple){
			accounts = await getAllAccountsWithMinRole(roles.indexOf(body.to));
			to = accounts.map((account: Account) => ({ to: `${account.username} <${account.email}>`, substitutions: account }));
		}
		await sgMail.send({
			isMultiple,
			from: `${body.from} <${body.address}>`,
			[isMultiple ? 'personalizations' : 'to']: to,
			substitutionWrappers: ['$', ''],
			substitutions: Object.fromEntries(Object.entries(sender).map(([k, v]) => ['sender.' + k, v])),
			subject: body.subject,
			html: '<p style="font-family:sans-serif">' + body.content.replaceAll('\n', '<br>').replaceAll('\t', '&nbsp;'.repeat(4)) + '</p>'
		});
		message = 'Sent email successfully.';
	} catch(err){
		message = 'Failed to send email: ' + err;
	}
}
---
<Admin title="Send email" minType={2} user={sender}>
	<h2>Send email</h2>
	<form method="post">
		<label for="from">From: </label>
		<input name="from" value={sender.username} size="10">
		<select name="address" value={sender.email}>
			<option value={sender.email}>{sender.email}</option>
			<option value="support@blankstorm.net">support@blankstorm.net</option>
		</select><br><br>
		<label for="to">To: </label>
		<select name="to" value={Astro.url.searchParams.get('to')}>
			{ Astro.url.searchParams.has('to') && <option value={Astro.url.searchParams.get('to')}>{Astro.url.searchParams.get('to')}</option>}
			<option value="owner">Owners</option>
			<option value="administrator">Administrators</option>
			<option value="developer">Developers</option>
			<option value="moderator">Moderators</option>
			<option value="user">Users</option>
		</select><br><br>
		<label for="subject">Subject: </label><input name="subject" size="50"><br><br>
		<textarea name="content" cols="100" rows="10"></textarea><br><br>
		<button>Send</button>
	</form>
</Admin> 
