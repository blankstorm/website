---
import { parse as parseMarkdown } from 'marked';
import type { Release } from '../repository';
import Asset from './Asset.astro';
import { formatNum } from '../utils';

interface Props {
	release: Release;
	include_downloads?: boolean;
}

const { release, include_downloads } = Astro.props;

let releaseBody: string;
try {
	releaseBody = parseMarkdown(release.body);
} catch (e) {
	releaseBody = `<p>Failed to parse release body: ${e}</p>`;
}
---

<div>
	<style>
		li {
			padding-top: 0.25em;
			padding-bottom: 0.25em;
		}
	</style>
	<a id={release.tag_name}></a>
	<br />
	<br />
	<h3 class="release-title">
		<a href={'#' + release.tag_name}>{release.name}</a>
	</h3>
	{release.prerelease && <em>This is a pre-release</em>}
	<p class="release-date">
		Release date:
		{new Date(release.created_at).toLocaleDateString(undefined, { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}
	</p>
	<h4>Details</h4>
	<div class="release-body" set:html={releaseBody} />
	{
		release.assets?.length > 0 && (
			<div>
				<h4>Downloads {include_downloads && <span>({formatNum(release.assets.reduce((total, { download_count }) => total + download_count, 0))} total)</span>}</h4>
				<p>
					{release.assets?.map((asset: any) => (
						<Asset {asset} {include_downloads} />
					))}
				</p>
			</div>
		)
	}
</div>
